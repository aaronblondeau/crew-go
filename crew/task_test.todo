
func TestCanResetTask(t *testing.T) {
	var errors []string
	errors = append(errors, "Internal server error")
	originalRunAfter := time.Now().Add(-1 * time.Second)
	task := Task{
		Id:                "T21",
		TaskGroupId:       "G21",
		Name:              "Reset Task",
		Worker:            "test",
		Workgroup:         "",
		Key:               "T21",
		RemainingAttempts: 0,
		IsPaused:          true,
		IsComplete:        true,
		Output:            map[string]interface{}{"ouput": "stuff"},
		Errors:            errors,
		RunAfter:          originalRunAfter,
	}

	taskGroupController := NewTaskGroupController(NewMemoryTaskStorage(), nil)
	group := NewTaskGroup("G21", "Test", taskGroupController)
	group.PreloadTasks([]*Task{&task}, &TaskTestClient{})
	group.Operate()

	updateComplete := make(chan error)
	group.TaskOperators["T21"].ResetTask(5, updateComplete)
	<-updateComplete

	if task.IsComplete != false {
		t.Fatalf(`Task.IsComplete = %v, want %v`, task.IsComplete, false)
	}
	if task.RemainingAttempts != 5 {
		t.Fatalf(`Task.RemainingAttempts = %v, want %v`, task.RemainingAttempts, 5)
	}
	if task.Output != nil {
		t.Fatalf(`Task.Output = %v, want %v`, task.Output, nil)
	}
	if len(task.Errors) != 0 {
		t.Fatalf(`len(task.Errors) = %v, want %v`, len(task.Errors), 0)
	}
	if !task.RunAfter.After(originalRunAfter) {
		t.Fatalf("Task RunAfter was not reset")
	}

	group.TaskOperators[task.Id].Shutdown <- true
}
